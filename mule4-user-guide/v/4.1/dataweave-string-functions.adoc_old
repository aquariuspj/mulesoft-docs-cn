= DataWeave String Functions

The functions described here are packaged in the Strings module. The module is included with the Mule runtime, but you must import it to your DataWeave code by adding the line `import dw::core::Strings` to your header.

.Example
[source]
----
%dw 2.0
import dw::core::Strings
---
Strings::capitalize(payload.customerName)
----

This module contains functions that allow you to modify strings in various ways.


== Camelize

=== camelize(String): Strings

Returns the provided string in camel case.

.Transform
[source,DataWeave, linenums]
----
%dw 2.0
import * from dw::core::Strings
output application/json
---
{
  a: camelize("customer"),
  b: camelize("customer_first_name"),
  c: camelize("customer name")
}
----

.Output
[source,json,linenums]
----
{
  "a": "customer",
  "b": "customerFirstName",
  "c": "customer name"
}
----


== Capitalize

=== capitalize(String): Strings

Returns the provided string with every word starting with a capital letter and no underscores. It also replaces underscores with spaces and puts a space before each capitalized word.

.Transform
[source,DataWeave, linenums]
----
%dw 2.0
import * from dw::core::Strings
output application/json
---
{
  a: capitalize("customer"),
  b: capitalize("customer_first_name"),
  c: capitalize("customer NAME"),
  d: capitalize("customerName")
}
----

.Output
[source,json,linenums]
----
{
  "a": "Customer",
  "b": "Customer First Name",
  "c": "Customer Name",
  "d": "Customer Name"
}
----

== CharCode

=== charCode(String): Number | Null
Returns the Number of the code of the specified String. The string must be of one character.

== Dasherize

=== dasherize(String): Strings

Returns the provided string with every word separated by a dash.

.Transform
[source,DataWeave, linenums]
----
%dw 2.0
import * from dw::core::Strings
output application/json
---
{
  a: dasherize("customer"),
  b: dasherize("customer_first_name"),
  c: dasherize("customer NAME")
}
----

.Output
[source,json,linenums]
----
{
  "a": "customer",
  "b": "customer-first-name",
  "c": "customer-name"
}
----

== FromCharCode

=== fromCharCode(Number): Strings
Returns the String of the specified Number code.

== Ordinalize

=== ordinalize(String): Strings
Returns the provided numbers set as ordinals.

.Transform
[source,DataWeave, linenums]
----
%dw 2.0
import * from dw::core::Strings
output application/json
---
{
  a: ordinalize(1),
  b: ordinalize(8),
  c: ordinalize(103)
}
----

.Output
[source,json,linenums]
----
{
  "a": "1st",
  "b": "8th",
  "c": "103rd"
}
----

== Pluralize

=== pluralize(String): Strings
Returns the provided string transformed into its plural form.

.Transform
[source,DataWeave, linenums]
----
%dw 2.0
import * from dw::core::Strings
output application/json
---
{
  a: pluralize("box"),
  b: pluralize("wife"),
  c: pluralize("foot")
}
----

.Output
[source,json,linenums]
----
{
  "a": "boxes",
  "b": "wives",
  "c": "feet"
}
----

== Singularize

=== singularize(String): String
Returns the provided string transformed into its singular form.

.Transform
[source,DataWeave, linenums]
----
%dw 2.0
import * from dw::core::Strings
output application/json
---
{
  a: singularize("boxes"),
  b: singularize("wives"),
  c: singularize("feet")
}
----

.Output
[source,json,linenums]
----
{
  "a": "box",
  "b": "wife",
  "c": "foot"
}
----

== Underscore

=== underscore(String): Strings
Returns the provided string with every word separated by an underscore.

.Transform
[source,DataWeave, linenums]
----
%dw 2.0
import * from dw::core::Strings
output application/json
---
{
  a: underscore("customer"),
  b: underscore("customer-first-name"),
  c: underscore("customer NAME")
}
----

.Output
[source,json,linenums]
----
{
  "a": "customer",
  "b": "customer_first_name",
  "c": "customer_NAME"
}
----


== See Also

// * link:dw-functions-core[Core Functions]
* link:dataweave-encrypt-functions[Encrypting Functions]
* link:dataweave-import-task[To Import DataWeave Modules]
* link:dataweave-create-module-task[To Create a DataWeave Module]
* link:dataweave-language-introduction[DataWeave Language Introduction]
