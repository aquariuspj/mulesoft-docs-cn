= DataWeave Scripts

You write DataWeave scripts in the Transform component of a Mule app. The script is divided into two sections that are delimited by a three-dash separator (&#45;&#45;&#45;).

// TODO?: or save them in a `.dwl` file that you import into a Mule app from Studio.

.DataWeave Script
[source, dataweave, linenums]
----
/*
 * Header example:
 */

 %dw 2.0
 ns msg http://www.mulesoft.com/anypoint/SOA/message/v1.0`
 import * from dw::core::Arrays
 fun toUser(obj) = {
   firstName: obj.field1,
   lastName: obj.field2
 }
 var myVar=13.15
 type myType
 output application/xml
 ---
 /*
  * Body example:
  * /

 {
   user: {
     name: payload.user_name,
     lastName: payload.user_lastName
   }
 }
----

.DataWeave Comments

Comments of these forms are allowed in DataWeave 2.0:

----
// My single-line comment here.

/*
 * My multi-line comment here.
 */
----

The DataWeave script can handle data input in a number of formats, including JSON:

.Input
[source,json,linenums]
----
 {
  "user_name": "Annie",
  "user_lastName": "Point"
 }
----

The DataWeave script above transforms the JSON input and into XML output like this:

.Output
[source,xml,linenums]
----
<?xml version="1.0" encoding="UTF-8"?>
<user>
 <name>Annie</name>
 <lastName>Point</lastName>
</user>
----

== DataWeave Header

The DataWeave header contains the directives, which define high-level information about your transformation:

* DataWeave version: Default.
+
Example: `%dw 2.0`
+
* Output type: The format that for the script to output. The default is to output the same type as input type.
+
Example: `output application/xml`
Note that only one output type can be specified. See <<dataweave-formats, DataWeave Formats>> for a list of valid data formats.
+
* Namespaces: Used to import a namespace.
+
Example: `ns msg http://www.mulesoft.com/anypoint/SOA/message/v1.0`
+
* Global variables: Define constants and can be referenced throughout the body of the DataWeave script.
+
.Example
[source, dataweave, linenums]
----
%dw 2.0
var conversionRate=13.15
output application/json
---
{
 price_dollars: payload.price,
 price_localCurrency: payload.price * conversionRate
}
----
+
* Functions: For creating custom functions that can be called from within the body of the script.
+
.Example
[source, dataweave, linenums]
----
%dw 2.0
output application/json
var toUser = (user) -> {firstName: user.name, lastName: user.lastName}
---
{
 user: toUser(payload)
}
----
// *Input type, for example, `%input payload application/xml`

== DataWeave Body

The DataWeave body contains the expression that generates the output structure. Note that MuleSoft provides a canonical way for you to work on data (a query, transform, build process) with the DataWeave model.

A good mental model for approaching the transformation script is to normalize the input to `application/dw`. This can help you determine whether an error is a formatting or a scripting error. So, for example, you might normalize your `application/xml` input to `application/dw` before providing your script that outputs to JSON (`application/json`).

.Example: JSON Input
[source,JSON,linenums]
----
{
    "size" : 1,
    "person": {
      "name": "Nial"
    }
}
----

The DataWeave script outputs the DataWeave format (`application/dw`).

.Example: DataWeave Script that Outputs application/dw
[source,DataWeave,linenums]
----
%dw 2.0
output application/dw
---
payload
----

The script produces `application/dw` output without an error.

.Example: application/dw Output
----
{
  size: 1,
  person: {
    name: "Nial"
  }
}
----

However, if you output the JSON to XML, you will receive an error (`Unexpected internal error`) because the JSON input lacks a single root. So the error is a formatting error.

.Example: Script that Outputs application/xml and Produces an Error
[source,DataWeave,linenums]
----
%dw 2.0
output application/xml
---
payload
----

To fix the script, you need to provide a single XML root, for example:

.Example: Script that Outputs application/xml
[source,DataWeave,linenums]
----
%dw 2.0
output application/xml
---
{
    "myroot" : payload
}
----

.Example: XML Output Containing a Single XML Root
[source,XML,linenums]
----
<?xml version='1.0' encoding='UTF-8'?>
<myroot>
  <size>1</size>
  <person>
    <name>Nial</name>
  </person>
</myroot>
----

Numerous <<see_also, other examples>> are available throughout the DataWeave documentation, and see link:dataweave-formats[Data Formats Supported by DataWeave].
// TODO: NEED MORE INFO HERE... show XML vs DW vs JSON

== DataWeave Output

The data model of the produced output could consist of these data types:

* Simple Values: Strings and numbers, for example: `Some String`, `18`.
* Arrays: A sequence of comma separated values, for example: `1, 2, 3`. The values can be any supported data type.
* Objects: A collection of key-value pairs, for example: `{"key": "some value"}`. The values can be any supported data type.
// TODO: ARE THERE ANY OTHERS?

[[see_also]]
== See Also

link:dataweave-selectors[DataWeave Selectors]

link:dw-functions[DataWeave Functions]

link:dataweave-cookbook[DataWeave Cookbook]

link:dataweave-formats[Data Formats Supported by DataWeave]

link:dataweave-types#functions-and-lambdas[Functions and Lambdas]
