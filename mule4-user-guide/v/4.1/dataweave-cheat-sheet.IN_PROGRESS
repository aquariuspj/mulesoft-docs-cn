= DataWeave Cheat Sheet

[[cheatsheet_general]]

TODO and organize:
* create and import a module

[[cheatsheet_operators]]
== Supported Operators

* `=, ~=, ==, >, <, <=, >=, !`
* `+, -, *, mod`
* `|`

== Data and Time Format

Example: `TODO`

For more info: TODO

== Conventions

The MuleSoft development team follows these conventions for named items:

* `type MyUser`  //Pascal case
* `fun myFun`    //Camel case
* `var myVar`    //Camel case
* `ns namespace` //Lower case
* `my/directory` //Lower case
* `myFile.dwl`   //Pascal Case


== Keywords and Symbols

.Type Coercion

* `as`: For example, `1 as String` returns `"1"`, and `"1" as Number` returns `1`. Some coercions are not possible. `true as String` returns `"true"`, but `"true" as Boolean` returns an error. For a list of types, see <<supported_types, Supported Types and Properties of Types>>.
// TODO: understand the limits of type coercion.

.Default Values

* `default`, for example: `{ color: payload.color default "green" }` For more information, see <<TODO, TODO>>.

.Pattern Matching

* `matches`, for example: TODO For more information, see <<TODO, TODO>>.

.Local Variables

* `using` is for initializing local variables within the body of a DataWeave script.
** Syntax: `using (<variable-name> = <expression>)`.
** Example: `using (x = 2) [1, x, 3]` results in `[1,2,3]`.

For more detail, see link:dataweave-variables[DataWeave Variables].

[[key_value_placeholders]]
.Key:Value Placeholders

* `$` is the value
* `$$` is the key

[[TODO]]
// TODO: is ??? needed by customers?
* `???` TODO: for type definitions, for example: `type String = ???`

Example: <<function_flatmap, flatMap>>

== Selectors

See more at

== DataWeave Header Directives

// TODO: ANY DEFAULTS?

* `%dw 2.0` for setting the DataWeave version.
* `import` for importing a function module.
 ** `import dw::core::Strings` is an example for a DataWeave module.
 ** `import myModules::MyCustomModule` is an for a custom module (DataWeave script) from a `.dwl` file (`myModules/MyCustomModule.dwl`) that contains it.
* `fun` for defining a function.
* `var` for defining a variable.
* `ns` for an XML namespace.
// TODO: HOW TO INSERT NAMESPACE INTO OUTPUT?
* `output` for a data format, for example: `output application/json`. Here are supported data formats:
 ** `application/csv`
 ** `application/dw` for the DataWeave format
 ** `multipart/form-data`
 ** `application/flatfile` for flat file, fixed width, and Cobol copybook
 ** `application/java`
 ** `application/json`
 ** `application/octet-stream` for binary data
 ** `application/xml` for XML and CDATA
 ** `application/xlsx` for Excel
 ** `application/x-www-form-urlencoded`
 ** `text/plain`

////
TODO:
== Setting Reader and Writer properties on formats
* via Function param, XML, or ...?
////

== Common Functions

* `groupBy`
** Signature: `fun groupBy <T,R>(lhs: Array<T> , criteria: (T, Number) -> R): {(R): Array<T>} = native("system::ArrayGroupByFunctionValue")`
** Signature: `fun groupBy <K,V,R,T>(lhs: {(K)?: V}, criteria: (V, K) -> R): {(R): Array<T>} = native("system::ObjectGroupByFunctionValue")`
//TODO: REPLACE THE ® WITH
** Example:

* `map` See also, `matches` for pattern matching.
** Signature:
** Example:

* `mapObject`
** Signature:
** Example:

* `filter`
** Signature: `filter(Array<T>, (T, Number) → Boolean): Array<T>`
** Example: `filter(["a", "b", "c"], (value, key) -> (key > 0))`, `["a", "b", "c"] filter (value, key) -> (key > 0)`, and `["a", "b"] filter ($$ == 1)` are all the same, and all return `["b", "c"]`.

* `contains`
** Signature: `contains(Array<T>, Any): Boolean`
** Example: `([1,2,3] contains 1)` and `contains([1,2,3], 1)` are the same, and both return `true`.
** Example: `payload.node.*subnode contains "this value"`

* `pluck`
** Signature: `pluck({ (K)?: V }, (V, K, Number) → R): Array<R>`
** Example:


* `unless`: Use `if else` instead.
* `when`: Use `if else` instead.
* `otherwise`: Use `if else` instead.
// TODO: There's also a component that does something like this. mention it here.

Examples:
----
%dw 2.0
output application/json
type Currency = String {format: "##"}
---
{
  books: payload.items.*item map {
    book: {
      price: $.price as Currency
    }
  }
}
----

== Control Flow

* `do`: Specified in the header. Example:
+
----
%dw 2.0
fun checkForString(a) = do { var check = true --- a is String }
output application/json
---
{result : checkForString("my string")}
----
* `if else`
 ** `else if`

Note that `when`, `unless` and `otherwise` are not supported starting in DataWeave 2.0.

[[supported_types]]
== Supported Types and Properties of Types
* Array (of any supported type): `[1, 2, 3]`
* Object: `{key : value}`
* Simple type:
 ** String: `"My String"`
 ** Number: `404`
// TODO: can you do something similar to float with decimal points, or is this only whole numbers

== Comments

* Single line comments:
+
----
// my comment here
----
+
* Multiline comments as `/* */`:
+
----
/*
 * my multiline
 * comment here
 */
----

== Selectors

TODO

== Function Notation

DataWeave functions can use infix and prefix notation. For example, these are the same concatenate (`++`) expressions into the string `"DataWeave"`:
* Prefix notation: `++("Data", "Weave")`
* Infix notation: `"Data" ++ "Weave"`

The next examples use `countBy`, a function in the `dw::core::Arrays` module. All have the same result (`2`).
* Prefix notation:
 ** `countBy([1,2,3], ((value) -> ((value mod 2) == 0)))}`
* Infix notation:
 ** `{ "result" : [1, 2, 3] countBy (value) -> ((value mod 2) == 0) }`
 ** `{ "result" : [1,2,3,4] countBy (($ mod 2) == 0) }`

These are the same `map` expressions:
* Prefix notation: `map(filter([1,2,3,4], (value) -> value > 1), (value) -> {a: value})`
* Infix notation: `[1,2,3,4] filter (value) -> value > 1 map (value) ->  {a: value}`

== Function Signatures

* `:` means returns.
 ** Example: `isEven(Number): Boolean` returns a Boolean value. `isEven(2)` returns `true`.
* `T`, `Array<T>`, `(T)`
 ** `T` is a generic that represents a type. The generic and be any letter.
 ** `countBy(Array<T>, (T) -> Boolean): Number` passes an array with elements of type `T` (`Array<T>`) and an expression (`(T)`) that returns a Boolean value of the same type `T`. If the Boolean returns `true`, returns a value of type Number. For example: `[1,2,3,4] countBy (($ mod 2) == 0)`

* `->` used in lambda expressions to TODO.

* `|` refers to a union or OR, for example:
 ** `++(Array<S>, Array<T>): Array<S | T>` returns an array containing the union of elements of types `S` and `T`. So `++([1,2], ["a", "b"])` returns `[ 1, 2, "a", "b"]`.
 ** `flatten(Array<Array<T> | Q>): Array<T | Q>` where [ `[1,2], 3, "a", {"b":"c"}]` returns `[[1,2], 3, "a", { "b": "c" }]`.
 ** `envVar(String): String | Null` where `{"HOME": System::envVar("HOME") }`. If `"HOME"` is not present

* `items:` and `callback:`
`flatMap<T,R>(items: Array<T>, callback:(T, Number) -> Array<R>): Array<R>`
 ** `["john", "peter"] flatMap [$$, $]` is the same as `["john", "peter"] flatMap (value, key) -> [value, key]`, and both return `["john", 0, "peter", 1]`.

* `?` means optional.
** `filterObject({ (K)?: V }, (V, K, Number) → Boolean): { (K)?: V }`
** Example:


Examples:

* `abs(Number): Number` passes a number to the `abs` function and returns a number. `Number` is a generic. In this case, it refers to an argument of type Number.

== XML Cheatsheet

* Inserting an attribute, for example: `title @(lang: "en", year: book.year): book.title`
