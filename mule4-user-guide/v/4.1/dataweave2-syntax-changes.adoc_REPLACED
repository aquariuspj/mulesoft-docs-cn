= DataWeave 2.0 Syntax Changes
:keywords: studio, anypoint, esb, transform, transformer, format, aggregate, rename, split, filter convert, xml, json, csv, pojo, java object, metadata, dataweave, data weave, datamapper, dwl, dfl, dw, output structure, input structure, map, mapping


DataWeave 2.0 (packaged as part of Mule Runtime 4.0) introduces the following syntax changes over previous versions:

* Removed automatic coercion from Object to Array (implies, for example, that the `map` function no longer works over an Object).
// TODO: should they use mapObject instead? Maybe we should give an example.
* Updated version header to `%dw 2.0`.
* Removed `%` from all other directives.
* Changed all type names format, which are now written without a colon and with an upper case letter (for example, `String` instead of `:string`, as before), for example: `1 as String` returns `"1"``.
* All operators are now functions (for example, `upper()`, `typeOf()`). Therefore, they must include their arguments between parentheses, for example, `upper("hello")` and `typeOf("hello")`.
// TODO: IS THIS TRUE for all or just for those that take a single argument? We used to all all the functions operators.
* Custom functions are declared in the DataWeave header via the keyword `fun`, rather than `function`. For example, `fun funName(args) = body`
* The `..` operator is no longer used for selecting ranges (but still works as a descendants selector). Its functionality is replaced by `to`. Example: `[2 to 15]`.
* `when`, `unless` and `otherwise` are no longer used for conditional logic. They have been replaced by `if` and `else`. This requires that you change the order of the expression. Example: `if payload is(String) uppercase(payload)`.
* Binary functions (that take two arguments) support an alternative infix notation (arg1 function arg2). For example, `payload.*items contains "3"` instead of `contains(payload.*items, "3")`.
* New key-value pair selector (`.&`) returns all matching keys and values. It returns them as a single object containing these.
* New namespace selector (`.#`) returns the namespace used.
* The functions `filter` and `groupBy` are overloaded to operate on objects.
* The functions `map`, `mapObject` and `filter` support a null input (in which case they return null).
* New supported syntax for `match` when using arrays `[head ~ tail]`
* Namespace prefixes can no longer contain the character `-`.
* Multiple functions are no longer packaged as part of the core functions module. The package they belong to must be manually imported in the header before they can be called.
* Index parameter: Added `index` as a third parameter to `mapObject`, `pluck`, `filter`, and `groupBy`.
* Closed objects: For declared types, added the pipe (`|`) syntax to specify a closed (or exact) object. For example, if `{|a: String|}` is specified as a return type of a function, the function cannot return `{a: String, b: Number}`.
* Ordered objects: Added the hyphen character (`-`) for ordered objects, for example: `{- a: String, b: Number -}`. The fields must be in the specified order.
* Repeated fields: Added the asterisk (`\*`) for repeated fields in an object, for example: `{ a*: String}`. This is primarily needed for XML, where the names of child elements can be repeated, unlike keys in Java and JSON objects.
* For the flat file, the content type is `application/flatfile` instead of `text\plain`.
////
TODO IN SEPARATE TOPIC, POINTING TO DW TYPES PAGE.
Declaring DW types
declare the type of a variable or of a function param or return, e.g.,
fun foo(arg1: {|a: String|}): String = arg1.a
`{|a: String|}` is the type of arg1

var message: String = "foo"
var user: {name*: String } = {name: "Mariano", name: "Leandro"}
var a: Array<Number> = [1,2,3]

for example, our `map` function
fun map <T,R>(lhs: Array<T>, rhs: (T, Number) -> R ): Array<R>
this signature says that it has 2 type parameters, T and R

`lhs` is an argument of type `Array<T>` (edited)

which is an array of `something`

that will be defined when the user calls the function

`rhs` is a lambda function, that has 2 inputs (T, Number) and returns something of type R (edited)

and the `map` function returns something of type `Array<R>`
////


////
Passing Data in URI params:
when you pass data in URI parameters, you need to encode them using that format
if you have for example
```{
  "key1" : ["value", "value@"],
  "key 2": "value 1",
  "key3": "value",
  "key 4 her%": null
}

that has to be formatted as
```key1=value&key1=value%40&key+2=value+1&key3=value&key+4+her%25
```
when used as URI parameters

you put `application/x-www-form-urlencoded` as your output format
with the header `output application/x-www-form-urlencoded` in the script
////

////
* Changed pattern matching     ... how?
* explain `[head ~ tail]` better
////

== See Also


* link:dataweave-language-introduction[DataWeave Language Introduction]

// * link:dw-functions-core[DataWeave Core Functions]

* link:dataweave-import-module[To Import DataWeave Modules]
