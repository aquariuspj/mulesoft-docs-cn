= DataWeave Encrypting Functions
:keywords: studio, anypoint, esb, transform, transformer, format, aggregate, rename, split, filter convert, xml, json, csv, pojo, java object, metadata, dataweave, data weave, datamapper, dwl, dfl, dw, output structure, input structure, map, mapping

.dw::Crypto Module

The functions described here are packaged in the Crypto module. The module is included with the Mule runtime, but you must import it to your DataWeave code by adding the line `import dw::Crypto` to your header.

.Example
[source]
----
%dw 2.0
import dw::Crypto
---
Crypto::MD5("asd")
----

This module contains encrypting functions that follow common algorithms such as MD5 or SHA1.


== HMACBinary

=== HMACBinary(Binary, Binary): Binary

Computes a Hash-based Message Authentication Code (HMAC) using the SHA1 hash function.

== HMACWith

=== HMACWith(Binary, Binary): String

Computes the HMAC hash and transforms and transforms the  binary result into a hexadecimal lower case string.

== MD5

=== MD5(Binary): String

Computes the MD5 hash and transforms and transforms the binary result into a hexadecimal lower case string.

.Transform
----
%dw 2.0
import dw::Crypto
output application/json
---
Crypto::MD5("asd")
----

.Output
----
"7815696ecbf1c96e6894b779456d330e"
----

== SHA1

=== SHA1(Binary): String

Computes the MD5 hash and transforms the binary result into a hexadecimal lower case string.

.Transform
----
%dw 2.0
import dw::Crypto
output application/json
---
Crypto::SHA1("dsasd"),
----

.Output
----
"2fa183839c954e6366c206367c9be5864e4f4a65",
----

== HashWith

=== hashWith(Binary, String): Binary

Computes the hash of the specified content with the given algorithm and returns the binary content

The algorithm can be "SHA-1", "MD5", "SHA-256", etc.

== See Also


* link:dataweave-string-functions[String Functions]
// * link:dw-functions-core[Core Functions]
* link:dataweave-import-task[To Import DataWeave Modules]
* link:dataweave-create-module-task[To Create a DataWeave Module]
* link:dataweave-language-introduction[DataWeave Language Introduction]
