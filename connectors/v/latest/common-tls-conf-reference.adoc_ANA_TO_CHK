= TLS Configuration Reference

This reference covers configuration of the passwords and certificates for Transport Level Security (TLS):

== KeyStore

You configure two passwords for the KeyStore:

* One to access the entire KeyStore file
* Another (keyPassword) to access the private key of the server inside the KeyStore file

In Design Center, set the path field to the location of the KeyStore file that contains the private and public keys of the client. Alternatively, in the XML Editor, add the <tls:key-store> element.

// TODO? IN 3.8 I THINK THE KEY STORE CERTIFICATE WAS OPTIONAL, BUT IN DESIGN CENTER, IT SEEMS REQUIRED. SHOULD THIS BE MENTIONED IN THE MIGRATION GUIDE?**

== Trust Store

Certificates can be generated by a well-known Certificate Authority (CA) or you can generate a certificate locally without external approval (self-signed certificate). The certificate from Certificate Authorities includes a digital signature that is usually accepted as trusted by any client that includes the CA certificate in its trust store.

If you don’t provide any values for the trust-store, the default Java trust store is used. The default trust store is updated with the Java version. Consequently, use an updated Java version that includes updates to well known CA certificates.

In the UI, you set the path to the location of the trust store file that contains the certificates of the trusted servers. Alternatively, in the XML Editor, add the <tls:trust-store> element.

To temporarily disable certificate validations, check Insecure. The Mule application accepts all certificates from an SSL endpoint without validating them in the flow. Remember to uncheck Insecure when you finally deploy your application.

== Two-Way Authentication

A TLS service needs to have two-way authentication: a private key and a public certificate. As mentioned, to configure two-way authentication, set up both a KeyStore and a trust store. Configure the KeyStore on the server to enforce two-way authentication with the client. The private key never leaves the server. The public certificate is exposed through TLS so clients can verify that they trust the server. If you're using a 2-way TLS authenticated connection, the client certificate is exposed using the attribute `http.client.cert`. You can access the client principal through: `attributes.clientCertificate.getSubjectDN()`.


== TLS Protocols and Cipher Suites

You can fine-tune the TLS configuration by manually setting which cipher suites and protocols to use. In the UI, the HTTP Listener Configuration and HTTP Request Configuration includes fields for configuring these things.

image::tls-protocols-cipher-suites.png[TLS Listener Configuration Enabled Protocols Enabled Cipher Suites,height=452,width=460]

For example, in Enabled Protocols, enter *TLSv1.2,SSLv3*. In Enabled Ciper Suites, enter the following value:

----
ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
----

If you do not use a UI, you can configure protocols and cipher suites in the Mule `/conf` directory. Select one of two files for fine-tuning the configuration by manually setting which cipher suites and protocols Mule will use:

* tls-default.conf
+
Allows fine-tuning when Mule is not configured to run in Federal Information Processing Standards (FIPS) security mode.
+
* tls-fips140-2.conf
+
Allows fine-tuning when Mule is running in FIPS security mode.

== See Also

* link:/connectors/common-workflow-conf-tls[Workflow: Configuring TLS]
* link:/connectors/common-about-tls[About TLS]
