<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
    <configuration defaultExceptionStrategy-ref="apiKitGlobalExceptionMapping" doc:name="Configuration" doc:description="Use as implicit default exception strategy." />
    <flow name="api-main">
        <http:listener config-ref="api-httpListenerConfig" path="/api/*" doc:name="HTTP"/>
        <apikit:router config-ref="config" doc:name="APIkit Router"/>
        <exception-strategy ref="apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="get:/customers:config">
        <!-- Build your query using Data Weave -->
        <dw:transform-message doc:name="Build Query">
            <dw:set-payload resource="classpath:ReadCollection.dwl" />
        </dw:transform-message>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <!-- Call your database -->
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:dynamic-query><![CDATA[#[payload]]]></db:dynamic-query>
        </db:select>
        <!-- Prepare your response -->
        <dw:transform-message doc:name="Build Response">
            <dw:set-payload resource="classpath:BuildOdataResponse.dwl" />
        </dw:transform-message>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
    </flow>
    <flow name="get:/orders:config">
        <dw:transform-message doc:name="Build Query">
            <dw:set-payload resource="classpath:ReadCollection.dwl" />
        </dw:transform-message>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:dynamic-query><![CDATA[#[payload]]]></db:dynamic-query>
        </db:select>
        <dw:transform-message doc:name="Build Response">
            <dw:set-payload resource="classpath:BuildOdataResponse.dwl" />
        </dw:transform-message>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
    </flow>
    <flow name="post:/customers:application/json:config">
    <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <!-- Build your query using Data Weave -->
        <dw:transform-message doc:name=" Build Query">
            <dw:set-payload resource="classpath:CreateEntity.dwl" />
            <dw:set-variable variableName="originalPayload" resource="classpath:StoreOriginalPayload.dwl" />
        </dw:transform-message>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <!-- Call your database -->
        <db:insert config-ref="MySQL_Configuration" doc:name=" Database" autoGeneratedKeys="true">
            <db:dynamic-query><![CDATA[#[payload]]]></db:dynamic-query>
        </db:insert>
        <!-- Check database result -->
        <dw:transform-message doc:name="Check result">
            <dw:set-payload resource="classpath:CheckInsertCustomerResult.dwl" />
        </dw:transform-message>
        <!-- Prepare your response -->
        <!-- Build your query using Data Weave -->
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:dynamic-query><![CDATA[#[payload]]]></db:dynamic-query>
        </db:select>
        <dw:transform-message doc:name=" Build Response">
            <dw:set-payload resource="classpath:BuildOdataResponse.dwl" />
        </dw:transform-message>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
    </flow>
    <flow name="post:/orders:application/json:config">
    <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <dw:transform-message doc:name=" Build Query">
            <dw:set-payload resource="classpath:CreateEntity.dwl" />
            <dw:set-variable variableName="originalPayload" resource="classpath:StoreOriginalPayload.dwl" />
        </dw:transform-message>
        <db:insert config-ref="MySQL_Configuration" doc:name=" Database" autoGeneratedKeys="true">
            <db:dynamic-query><![CDATA[#[payload]]]></db:dynamic-query>
        </db:insert>
        <!-- Check database result -->
        <dw:transform-message doc:name="Check result">
            <dw:set-payload resource="classpath:CheckInsertOrderResult.dwl" />
        </dw:transform-message>
        <!-- Prepare your response -->
        <!-- Build your query using Data Weave -->
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:dynamic-query><![CDATA[#[payload]]]></db:dynamic-query>
        </db:select>
        <dw:transform-message doc:name=" Build Response">
            <dw:set-payload resource="classpath:BuildOdataResponse.dwl" />
        </dw:transform-message>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
    </flow>
    <flow name="get:/customers/{customersId}:config">
        <!-- Build your query using Data Weave -->
        <dw:transform-message doc:name="Build Query">
            <dw:set-payload resource="classpath:ReadCustomer.dwl" />
        </dw:transform-message>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <!-- Call your database -->
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:dynamic-query><![CDATA[#[payload]]]></db:dynamic-query>
        </db:select>
        <!-- Check database result -->
        <choice doc:name="Affected entries == 0? ">
            <when expression="#[payload.isEmpty()]">
                <!-- Return 404 -->
                <scripting:component doc:name="Groovy">
                    <scripting:script engine="Groovy"><![CDATA[throw new org.mule.module.apikit.exception.NotFoundException();]]></scripting:script>
                </scripting:component>
            </when>
            <otherwise>
                <!-- Prepare your response -->
                <dw:transform-message doc:name=" Build Response">
                    <dw:set-payload resource="classpath:BuildOdataResponse.dwl" />
                </dw:transform-message>
            </otherwise>
        </choice>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
    </flow>
    <flow name="get:/orders/OrderID_{OrderID}-ShipName_{ShipName}:config">
    <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <dw:transform-message doc:name="Build Query">
            <dw:set-payload resource="classpath:ReadOrder.dwl" />
        </dw:transform-message>
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:dynamic-query><![CDATA[#[payload]]]></db:dynamic-query>
        </db:select>
        <!-- Check database result -->
        <choice doc:name="Affected entries == 0? ">
            <when expression="#[payload.isEmpty()]">
                <!-- Return 404 -->
                <scripting:component doc:name="Entity Not Found">
                    <scripting:script engine="Groovy"><![CDATA[throw new org.mule.module.apikit.exception.NotFoundException();]]></scripting:script>
                </scripting:component>
            </when>
            <otherwise>
                <!-- Prepare your response -->
                <dw:transform-message doc:name=" Build Response">
                    <dw:set-payload resource="classpath:BuildOdataResponse.dwl" />
                </dw:transform-message>
            </otherwise>
        </choice>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
    </flow>
    <flow name="put:/customers/{customersId}:application/json:config">
    <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <dw:transform-message doc:name=" Build Query">
            <dw:set-payload resource="classpath:UpdateCustomer.dwl" />
        </dw:transform-message>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <db:update config-ref="MySQL_Configuration" doc:name=" Database">
            <db:dynamic-query><![CDATA[#[payload]]]></db:dynamic-query>
        </db:update>
        <!-- Check database result -->
        <choice doc:name="Affected entries == 0? ">
            <when expression="#[payload == 0]">
                <!-- Return 404 -->
                <scripting:component doc:name="Entity Not Found">
                    <scripting:script engine="Groovy"><![CDATA[throw new org.mule.module.apikit.exception.NotFoundException();]]></scripting:script>
                </scripting:component>
            </when>
            <otherwise>
                <!-- Prepare your response -->
                <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Payload"/>
            </otherwise>
        </choice>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
    </flow>
    <flow name="put:/orders/OrderID_{OrderID}-ShipName_{ShipName}:application/json:config">
    <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <dw:transform-message doc:name=" Build Query">
            <dw:set-payload resource="classpath:UpdateOrder.dwl" />
        </dw:transform-message>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <db:update config-ref="MySQL_Configuration" doc:name=" Database">
            <db:dynamic-query><![CDATA[#[payload]]]></db:dynamic-query>
        </db:update>
        <!-- Check database result -->
        <choice doc:name="Affected entries == 0? ">
            <when expression="#[payload == 0]">
                <!-- Return 404 -->
                <scripting:component doc:name="Entity Not Found">
                    <scripting:script engine="Groovy"><![CDATA[throw new org.mule.module.apikit.exception.NotFoundException();]]></scripting:script>
                </scripting:component>
            </when>
            <otherwise>
                <!-- Prepare your response -->
                <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Payload"/>
            </otherwise>
        </choice>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
    </flow>
    <flow name="delete:/customers/{customersId}:config">
        <!-- Build your query using Data Weave -->
        <dw:transform-message doc:name="Build Query">
            <dw:set-payload resource="classpath:DeleteCustomer.dwl" />
        </dw:transform-message>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <!-- Call your database -->
        <db:delete config-ref="MySQL_Configuration" doc:name="Database">
            <db:dynamic-query><![CDATA[#[payload]]]></db:dynamic-query>
        </db:delete>
        <!-- Check database result -->
        <choice doc:name="Affected entries == 0? ">
            <when expression="#[payload == 0]">
                <!-- Return 404 -->
                <scripting:component doc:name="Entity Not Found">
                    <scripting:script engine="Groovy"><![CDATA[throw new org.mule.module.apikit.exception.NotFoundException();]]></scripting:script>
                </scripting:component>
            </when>
            <otherwise>
                <!-- Prepare your response -->
                <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Payload"/>
            </otherwise>
        </choice>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
    </flow>
    <flow name="delete:/orders/OrderID_{OrderID}-ShipName_{ShipName}:config">
        <dw:transform-message doc:name="Build Query">
            <dw:set-payload resource="classpath:DeleteOrder.dwl" />
        </dw:transform-message>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
        <db:delete config-ref="MySQL_Configuration" doc:name="Database">
            <db:dynamic-query><![CDATA[#[payload]]]></db:dynamic-query>
        </db:delete>
        <!-- Check database result -->
        <choice doc:name="Affected entries == 0? ">
            <when expression="#[payload == 0]">
                <!-- Return 404 -->
                <scripting:component doc:name="Entity Not Found">
                    <scripting:script engine="Groovy"><![CDATA[throw new org.mule.module.apikit.exception.NotFoundException();]]></scripting:script>
                </scripting:component>
            </when>
            <otherwise>
                <!-- Prepare your response -->
                <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Payload"/>
            </otherwise>
        </choice>
        <logger level="DEBUG" message="#[payload]" doc:name="Logger"/>
    </flow>
    <apikit:mapping-exception-strategy name="apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;#[exception.causeException.message]&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="409">
            <apikit:exception value="com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;#[exception.causeException.message]&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="500">
            <apikit:exception value="java.sql.SQLException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;#[exception.causeException.message]&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="500">
            <apikit:exception value="com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;#[exception.causeException.message]&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>